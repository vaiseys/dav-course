---
title: "MD 07 Demo"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#| message: false

library(moderndive)
library(tidyverse)
theme_set(theme_light())
```

## Does Travis Kelce play better when Taylor Swift is at the game?

[Point](https://www.cbssports.com/nfl/news/travis-kelce-knows-his-numbers-are-significantly-better-when-taylor-swift-attends-how-could-i-not-be-aware/)

[Counterpoint](https://goodauthority.org/news/taylor-swift-travis-kelce-football/)

```{r}
swift <- tribble(
  ~catches, ~yards, ~taylor,
       8.5,    108, "Present",
       7.0,   46.5, "Absent"
)

ggplot(swift,
       aes(x = taylor,
           fill = taylor,
           y = yards)) +
  geom_col() +
  labs(x = "Taylor Swift is...",
       y = "Receiving Yards",
       title = "Does Taylor Swift improve Travis Kelce's performances?") +
  theme(legend.position = "none")
```

## Let's do it ourselves

Input the raw data from the NFL website.

```{r}
swift2 <- tribble(
  ~gw, ~yds, ~present,
  2, 26,   "Absent",
  3, 69,   "Present",
  4, 60,   "Present",
  5, 67,   "Absent",
  6, 124,  "Present",
  7, 179,  "Present",
  8, 58,   "Absent"
)
```

Plot the raw data.

```{r}
ggplot(swift2,
       aes(x = yds,
           y = "",
           group = present,
           color = present)) +
  geom_jitter(width = .02,
              height = .02) +
  labs(color = "Swift is...",
       y = "",
       x = "Kelce receiving yards")
```

Use regression to take the difference between groups.

```{r}
mod1 <- lm(yds ~ present,
           data = swift2)

mod1_coefs <- get_regression_table(mod1)
mod1_coefs
```

The 95% confidence interval is a measure of uncertainty. Let's talk about it.

Visualize the result.

```{r}
mod1_coefs |>
  filter(term == "present: Present") |> 
  ggplot(aes(x = estimate,
             xmax = upper_ci,
             xmin = lower_ci,
             y = "")) +
  geom_pointrange() +
  geom_vline(xintercept = 0,
             linetype = "dotted",
             color = "red") +
  scale_x_continuous(breaks = seq(-50, 200, 50),
                     limits = c(-50, 200)) +
  labs(y = "",
       x = "The Swift Effect",
       title = "Effect of Swift's Presence on Kelce's Receiving Yards",
       subtitle = "95% Confidence interval",
       caption = "Data from first 8 game weeks of 2023 NFL Season")
```

## What does all this mean?

The example above is about comparing two groups (present vs. absent) but these ideas are easier to understand when we just start with trying to estimate uncertainty about one number.

What proportion of these balls are red?

![](https://d33wubrfki0l68.cloudfront.net/0868c64eb2998fbe3e3bfccf7ff55e746341baf3/eeab1/images/sampling/balls/sampling_bowl_1.jpg){width="1000"}

We could use a shovel to take a sample of 50 balls and try to estimate from that.

![](https://d33wubrfki0l68.cloudfront.net/ee8292df457bd73d7a1a7d75c21be32d6e8659d6/30e62/images/sampling/balls/sampling_bowl_3_cropped.jpg){width="1000"}

Here's the same info.

```{r}
head(bowl, n = 10)
```

Let's take a sample.

```{r}
shovel1 <- bowl |> 
  rep_sample_n(size = 50)

shovel1 |> 
  mutate(is_red = if_else(color == "red", 1L, 0L)) |> 
  summarize(prop_red = mean(is_red))
```

```{r}
shovels100 <- 
  bowl |> 
  rep_sample_n(size = 50,
               reps = 100) |> 
  mutate(is_red = if_else(color == "red", 1L, 0L)) |> 
  group_by(replicate) |>
  summarize(prop_red = mean(is_red))

shovels100 |> 
  ggplot(aes(x = prop_red)) +
  geom_histogram(boundary = .5,
                 binwidth = .10,
                 color = "white")
```

```{r}
shovels100_big <- 
  bowl |> 
  rep_sample_n(size = 300,
               reps = 100) |> 
  mutate(is_red = if_else(color == "red", 1L, 0L)) |> 
  group_by(replicate) |>
  summarize(prop_red = mean(is_red))

shovels100_big |> 
  ggplot(aes(x = prop_red)) +
  geom_histogram(boundary = .5,
                 binwidth = .025,
                 color = "white")

```

## Another example

```{r}
library(worldfootballR)
```

```{r}
#| cache: true

d <- fb_match_results("ENG",
                       "M", 
                       2023)
```

Make the dataset I need. (I'm also going to save the original in the data folder just in case this function breaks later. It's `epl_2023.Rdata`.)

```{r}
glimpse(d)

lfc2023 <- d |> 
  filter(Home == "Liverpool" | Away == "Liverpool") |> 
  mutate(home_points = case_when(HomeGoals > AwayGoals ~ 3,
                                 HomeGoals < AwayGoals ~ 0,
                                 .default = 1),
         away_points = case_when(HomeGoals < AwayGoals ~ 3,
                                 HomeGoals > AwayGoals ~ 0,
                                 .default = 1),
         lfc_points = if_else(Home == "Liverpool", home_points, away_points),
         matchweek = as.integer(Wk)) |> 
  select(matchweek, lfc_points) |> 
  arrange(matchweek)

glimpse(lfc2023)
```

How many points were Liverpool really going to earn that season? 67. Since there are 38 games, this was a points-per-game of 1.763158.

But what about the "sample" of the early season?

```{r}
lfc2023 <- lfc2023 |> 
  mutate(ppg_to_date = cumsum(lfc_points) / matchweek)
```

```{r}
ggplot(lfc2023,
       aes(x = matchweek,
           y = ppg_to_date)) +
    geom_hline(yintercept = 67/38, 
               linetype = "dotted") +
    geom_line(color = "red")
```

## Another example (simpler)

```{r}
load(here::here("Data", "gss2018.Rdata"))
glimpse(gss2018)

gss2018 <- gss2018 |> 
  mutate(conservative = if_else(polviews >=5, 1L, 0L))
```

How do estimates change with sample size?

```{r}
set.seed(1)

mean(gss2018$conservative) # full sample proportion

gss30 <- gss2018 |> 
  slice_sample(n = 30) |> 
  mutate(sampsize = 30)

gss120 <- gss2018 |> 
  slice_sample(n = 120) |> 
  mutate(sampsize = 120)

gss480 <- gss2018 |> 
  slice_sample(n = 480) |> 
  mutate(sampsize = 480)

gss960 <- gss2018 |> 
  slice_sample(n = 960) |> 
  mutate(sampsize = 960)

gss_all <- gss2018 |> 
  mutate(sampsize = nrow(gss2018))

samples <- bind_rows(gss30, gss120, gss480, gss960, gss_all)

samples |> 
  group_by(sampsize) |> 
  summarize(est_prop = mean(conservative))

```

Let's check uncertainty of estimates.

```{r}
reps <- gss2018 |> 
  rep_sample_n(size = 2220,
               reps = 1000,
               replace = TRUE) |> 
  group_by(replicate) |> 
  summarize(prop_cons = mean(conservative))
  
  
ggplot(reps,
       aes(x = prop_cons )) +
  geom_histogram(color = "white",
                 boundary = .3,
                 binwidth = .01)
```
